{"version":3,"sources":["GlobalStyle.js","Opcoes.js","Alternancia.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","body","backgroundcolor","color","colortext","OpcaoClara","text","OpcaoEscura","ModelButton","styled","button","Alternancia","temaTexto","alternaciaTema","label","join","onClick","App","props","state","setState","inputText","imputText","data","this","className","type","placeholder","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kwBAEO,IAAMA,EAAcC,YAAH,KAEF,qBAAEC,MAAiBC,QAKb,qBAAED,MAAiBE,mBAG9B,qBAAEF,MAAiBG,SAanB,qBAAEH,MAAiBI,aCzBvBC,EAAa,CACtBJ,KAAM,WACNK,KAAM,UACNH,MAAO,QACPC,UAAW,QACXF,gBAAiB,WAGRK,EAAc,CACvBN,KAAM,UACNK,KAAM,UACNH,MAAO,QACPC,UAAW,QACXF,gBAAiB,S,4MCTrB,IAAMM,EAAcC,IAAOC,OAAV,KACC,qBAAEV,MAAiBE,mBACxB,qBAAEF,MAAiBG,SAiBjBQ,EAVK,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,eACzBC,EAAQ,CAAC,cAA6B,WAAdF,EAAyB,SAAW,UAAUG,KAAK,IAC/E,OACI,cAACP,EAAD,CAAaQ,QAASH,EAAtB,SACKC,KC2CEG,G,wDAlDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaNL,eAAiB,WACQ,WAArB,EAAKM,MAAMnB,MACb,EAAKoB,SAAS,CACZC,UAAW,EAAKF,MAAME,UACtBrB,MAAO,WAGT,EAAKoB,SAAS,CACZC,UAAW,EAAKF,MAAMG,UACtBtB,MAAO,YArBX,EAAKmB,MAAQ,CACXE,UAAW,GACXrB,MAAO,UAJQ,E,6DAQFuB,GACfC,KAAKJ,SAAS,CACZC,UAAWE,M,+BAmBb,OACE,eAAC,IAAD,CAAevB,MAA8B,WAArBwB,KAAKL,MAAMnB,MAAqBO,EAAcF,EAAtE,UACE,cAACP,EAAD,IACA,sBAAK2B,UAAU,MAAf,UACE,iCACE,oBAAIA,UAAU,QAAd,sCACA,sBACA,uBAAOC,KAAK,OAAOC,YAAY,uBAC/B,wBAASF,UAAU,SAAnB,yBACA,yBAGF,cAAC,EAAD,CAAab,UAAaY,KAAKL,MAAMnB,MAAOa,eAAgBW,KAAKX,2B,GA1CzDe,cCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.04453b3b.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    body {\r\n        background: ${({theme}) => theme.body};\r\n        padding: 200px;\r\n    }\r\n\r\n    button {\r\n        background-color: ${({theme}) => theme.backgroundcolor}; \r\n        border: none;\r\n        margin-left: 5px;\r\n        color: ${({theme}) => theme.color};\r\n        padding: 5px 25px;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        font-size: 15px;\r\n        &:hover {\r\n            opacity: 0.6;\r\n            \r\n        }\r\n    }\r\n\r\n    .texto {\r\n        color: ${({theme}) => theme.colortext};\r\n    }\r\n`; \r\n\r\nexport default GlobalStyle;\r\n","export const OpcaoClara = {\r\n    body: '##e9eff1',\r\n    text: '#363537',\r\n    color: 'white',\r\n    colortext: 'black',\r\n    backgroundcolor: '#414344'\r\n}\r\n\r\nexport const OpcaoEscura = {\r\n    body: '#363537',\r\n    text: '#FAFAFA',\r\n    color: 'black',\r\n    colortext: 'white',\r\n    backgroundcolor: 'white'\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst ModelButton = styled.button`\r\n    background: ${({theme}) => theme.backgroundcolor};\r\n    color: ${({theme}) => theme.color};\r\n    border-radios: 30px;\r\n    cursor: pointer;\r\n    font-size: 0.8rem;\r\n    padding: 0.6rem;\r\n`;\r\n\r\nconst Alternancia = ({temaTexto, alternaciaTema}) => {\r\n    let label = ['Mudar para ', temaTexto === 'Branco' ? 'Escuro' : 'Branco'].join('');\r\n    return (\r\n        <ModelButton onClick={alternaciaTema}>\r\n            {label}\r\n        </ModelButton>\r\n    );\r\n}\r\n\r\n\r\nexport default Alternancia;","import React, { Component } from \"react\";\nimport  { GlobalStyle } from './GlobalStyle.js'; \nimport { ThemeProvider } from \"styled-components\";\nimport { OpcaoEscura, OpcaoClara } from './Opcoes';\nimport Alternancia from './Alternancia';\n\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: \"\",\n      theme: \"Branco\",\n    };\n  }\n\n  searchBoxHandler(data) {\n    this.setState({\n      inputText: data\n    });\n  }\n\n    alternaciaTema = () => {\n    if (this.state.theme === 'Branco') {\n      this.setState({\n        inputText: this.state.inputText,\n        theme: 'Escuro',\n      });\n    } else {\n      this.setState({\n        inputText: this.state.imputText,\n        theme: 'Branco',  \n      });\n    }\n  }\n\n  render() { \n    return (\n      <ThemeProvider theme = {this.state.theme === 'Escuro' ? OpcaoEscura : OpcaoClara}>\n        <GlobalStyle/>\n        <div className=\"App\">\n          <form>\n            <h1 className=\"texto\">Sign up to my newsletter</h1>\n            <p></p>\n            <input type=\"text\" placeholder=\"dougsaaj@gmail.com\"></input>\n            <button  className=\"button\">Inscreva-se</button>\n            <p></p>\n          </form>\n\n          <Alternancia temaTexto = {this.state.theme} alternaciaTema={this.alternaciaTema}/>\n        </div>\n      </ThemeProvider>    \n    );\n    \n  }\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}